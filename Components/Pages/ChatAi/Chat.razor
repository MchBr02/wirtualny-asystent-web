@page "/Chat"
@using Microsoft.AspNetCore.Components.Web
@using Client_ui.Domain.DTO
@using Client_ui.Service
@inject IApiChatService ApiChatService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudGrid>
        <!-- Panel główny chatu -->
        <MudItem xs="12" md="10">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h5">Chat z API</MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="TestConnection">
                        Test połączenia
                    </MudButton>
                    <MudChip T="string"
                             Color="@(connectionStatus ? Color.Success : Color.Error)"
                             Icon="@(connectionStatus ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error)">
                        @(connectionStatus ? "Połączono" : "Błąd")
                    </MudChip>
                </MudCardHeader>
                <MudCardContent>
                    <!-- Historia wiadomości -->
                    <MudPaper Class="pa-3 mb-4" Elevation="1" Style="height: 500px; overflow-y: auto;" id="chat-container">
                        @if (chatMessages.Count == 0)
                        {
                            <MudText Class="text-center text-muted">Brak wiadomości. Rozpocznij konwersację!</MudText>
                        }
                        else
                        {
                            @foreach (var msg in chatMessages)
                            {
                                <MudPaper Class="pa-3 mb-2" Elevation="2"
                                          Style="@(msg.IsUser ? "background-color: #e3f2fd; margin-left: 20%;" : "background-color: #f5f5f5; margin-right: 20%;")">
                                    @if (msg.IsUser)
                                    {
                                        <MudText Typo="Typo.body1">@msg.Content</MudText>
                                    }
                                    else
                                    {
                                        <!-- Wyświetl odpowiedź bota z formatowaniem -->
                                        <div style="white-space: pre-wrap;">
                                            @((MarkupString)FormatBotResponse(msg.Content))
                                        </div>
                                    }
                                    <MudText Typo="Typo.caption" Class="text-muted">
                                        @msg.Timestamp.ToString("HH:mm:ss")
                                    </MudText>
                                </MudPaper>
                            }
                        }
                    </MudPaper>

                    <!-- Pole wprowadzania wiadomości -->
                    <MudGrid AlignItems="Center">
                        <MudItem xs="10">
                            <MudTextField @bind-Value="messageText"
                                          Label="Napisz wiadomość..."
                                          Variant="Variant.Outlined"
                                          @onkeypress="HandleKeyPress"
                                          Disabled="@isLoading"
                                          FullWidth="true" />
                        </MudItem>
                        <MudItem xs="2">
                            <MudButton Class="ml-2"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Send"
                                       OnClick="SendMessage"
                                       Disabled="@(isLoading || string.IsNullOrWhiteSpace(messageText))"
                                       FullWidth="true">
                                @if (isLoading)
                                {
                                    <MudProgressCircular Size="Size.Small" />
                                }
                                else
                                {
                                    <span>Wyślij</span>
                                }
                            </MudButton>
                        </MudItem>
                    </MudGrid>

                    <!-- Przyciski szybkich akcji -->
                    <MudPaper Class="pa-3 mt-4" Elevation="0">
                        <MudText Typo="Typo.subtitle2" Class="mb-2">Szybkie komendy:</MudText>
                        <MudButton Class="mr-2 mb-2" Variant="Variant.Outlined" Size="Size.Small"
                                   OnClick="@(() => SendQuickMessage("!stats"))">
                            Statystyki
                        </MudButton>
                        <MudButton Class="mr-2 mb-2" Variant="Variant.Outlined" Size="Size.Small"
                                   OnClick="@(() => SendQuickMessage("!help"))">
                            Pomoc
                        </MudButton>
                        <MudButton Class="mr-2 mb-2" Variant="Variant.Outlined" Size="Size.Small"
                                   OnClick="@(() => SendQuickMessage("Jaka jest pogoda?"))">
                            Pogoda
                        </MudButton>
                        <MudButton Class="mr-2 mb-2" Variant="Variant.Outlined" Size="Size.Small"
                                   OnClick="ClearChat">
                            Wyczyść chat
                        </MudButton>
                    </MudPaper>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <!-- Panel boczny ze statusem -->
        <MudItem xs="12" md="2">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h6">Status</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText T="string">Połączenie: @(connectionStatus ? "OK" : "Błąd")</MudText>
                    <MudText T="string">Wiadomości: @chatMessages.Count</MudText>
                    <MudText T="string">Ostatnia: @(chatMessages.LastOrDefault()?.Timestamp.ToString("HH:mm") ?? "Brak")</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private string messageText = "";
    private List<ChatMessageDto> chatMessages = new List<ChatMessageDto>();
    private bool isLoading = false;
    private bool connectionStatus = false;
    private string? userId = null;

    protected override async Task OnInitializedAsync()
    {
        userId = Guid.NewGuid().ToString(); // Unikalny ID sesji
        await TestConnection();
    }

    private string FormatBotResponse(string response)
    {
        if (string.IsNullOrEmpty(response))
            return response;

        // Zamień \n na prawdziwe nowe linie
        response = response.Replace("\\n", "\n");

        // Formatuj listy z gwiazdkami
        var lines = response.Split('\n');
        var formattedLines = new List<string>();

        foreach (var line in lines)
        {
            var trimmedLine = line.Trim();

            // Jeśli linia zaczyna się od gwiazdki, zamień na bullet point
            if (trimmedLine.StartsWith("*"))
            {
                var content = trimmedLine.Substring(1).Trim();
                formattedLines.Add($"• {content}");
            }
            // Jeśli linia zawiera "Dzień X:", zrób ją pogrubionym nagłówkiem
            else if (trimmedLine.Contains("Dzień") && trimmedLine.Contains(":"))
            {
                formattedLines.Add($"<strong>{trimmedLine}</strong>");
            }
            // Zwykła linia
            else
            {
                formattedLines.Add(trimmedLine);
            }
        }

        return string.Join("\n", formattedLines);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(messageText) || isLoading)
            return;

        isLoading = true;
        var userMessage = messageText;
        messageText = "";

        // Dodaj wiadomość użytkownika do historii
        chatMessages.Add(new ChatMessageDto
        {
            Content = userMessage,
            IsUser = true,
            Timestamp = DateTime.Now
        });

        StateHasChanged();
        await ScrollToBottom();

        try
        {
            // Wyślij do API
            var response = await ApiChatService.SendMessageAsync(userMessage, userId);

            if (response.Success)
            {
                chatMessages.Add(new ChatMessageDto
                {
                    Content = response.Response,
                    IsUser = false,
                    Timestamp = DateTime.Now
                });

                Snackbar.Add("Wiadomość wysłana pomyślnie!", Severity.Success);
            }
            else
            {
                chatMessages.Add(new ChatMessageDto
                {
                    Content = $"Błąd: {response.Error ?? response.Response}",
                    IsUser = false,
                    Timestamp = DateTime.Now
                });

                Snackbar.Add($"Wystąpił błąd: {response.Error ?? response.Response}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            chatMessages.Add(new ChatMessageDto
            {
                Content = $"Błąd połączenia: {ex.Message}",
                IsUser = false,
                Timestamp = DateTime.Now
            });

            Snackbar.Add($"Wystąpił błąd: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            await ScrollToBottom();
        }
    }

    private async Task SendQuickMessage(string message)
    {
        messageText = message;
        await SendMessage();
    }

    private async Task TestConnection()
    {
        connectionStatus = await ApiChatService.TestConnectionAsync();

        if (connectionStatus)
        {
            Snackbar.Add("Połączenie z API działa!", Severity.Success);
        }
        else
        {
            Snackbar.Add("Błąd połączenia z API", Severity.Error);
        }

        StateHasChanged();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private void ClearChat()
    {
        chatMessages.Clear();
        StateHasChanged();
        Snackbar.Add("Historia chatu wyczyszczona", Severity.Info);
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(100);
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}