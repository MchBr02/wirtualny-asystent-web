@page "/Chat"
@using Client_ui.Domain.DTO
@using Client_ui.Service
@inject IChatService ChatService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">Test komunikacji z ChatService</MudText>
        </MudCardHeader>

        <MudCardContent>
            <MudTextField @bind-Value="messageText" Label="Wiadomość" Variant="Variant.Outlined" />

            <MudButton Class="mt-3" Variant="Variant.Filled" Color="Color.Primary"
                       OnClick="SendMessage" StartIcon="@Icons.Material.Filled.Send">
                Wyślij wiadomość
            </MudButton>

            <MudButton Class="mt-3 ml-2" Variant="Variant.Outlined" Color="Color.Secondary"
                       OnClick="RunTest">
                Wyślij testowe żądanie
            </MudButton>

            @if (_result is not null)
            {
                <MudPaper Class="pa-4 mt-4" Elevation="3">
                    <MudText Typo="Typo.subtitle1">Odpowiedź serwera:</MudText>
                    <MudText Class="mt-2">@_result</MudText>
                </MudPaper>
            }

            @if (chatMessages.Count > 0)
            {
                <MudDivider Class="my-4" />
                <MudText Typo="Typo.h6">Historia wiadomości</MudText>

                <MudPaper Class="pa-3 mt-2" Elevation="0" Style="max-height: 300px; overflow-y: auto;">
                    @foreach (var msg in chatMessages)
                    {
                        <MudPaper Class="pa-3 mb-2" Elevation="1">
                            <MudText>@msg</MudText>
                        </MudPaper>
                    }
                </MudPaper>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private string? _result;
    private string messageText = "";
    private List<string> chatMessages = new List<string>();

    protected override Task OnInitializedAsync() => Task.CompletedTask;

    private async Task RunTest()
    {
        try
        {
            Snackbar.Add("Wysyłanie testowego żądania...", Severity.Info);
            _result = await ChatService.TestPOST();
            chatMessages.Add($"Test: {_result}");
            Snackbar.Add("Test zakończony sukcesem!", Severity.Success);
        }
        catch (Exception ex)
        {
            _result = $"Błąd: {ex.Message}";
            Snackbar.Add("Test zakończony niepowodzeniem!", Severity.Error);
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(messageText))
        {
            Snackbar.Add("Wiadomość nie może być pusta", Severity.Warning);
            return;
        }

        try
        {
            // Tutaj możesz zaimplementować wysyłanie niestandardowej wiadomości
            // np. tworząc nową metodę w ChatService
            chatMessages.Add($"Wysłano: {messageText}");
            messageText = ""; // Wyczyść pole po wysłaniu

            Snackbar.Add("Wiadomość wysłana!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Błąd: {ex.Message}", Severity.Error);
        }
    }
}