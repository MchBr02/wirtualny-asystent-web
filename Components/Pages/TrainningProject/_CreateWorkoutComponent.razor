
@using Client_ui.Service
@using Client_ui.Domain.DTO
@using MudBlazor
@using MudBlazor.Services
@inject IWorkoutService WorkoutService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="workout.WorkoutName"
                    Label="Nazwa Treningu"
                    Required="true"
                    RequiredError="Nazwa treningu jest wymagana"
                    Class="mb-4" />
                </MudItem>
                <MudItem xs="12">
                    <MudNumericField @bind-Value="workout.WorkoutQuality"
                    Label="Jakość Treningu"
                    Required="true"
                    RequiredError="Jakość treningu jest wymagana"
                    Min="1"
                    Max="5"
                    Class="mb-4" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Value="@timeString"
                    ValueChanged="@(new EventCallback<string>(this, OnTimeChangeAsync))"
                    Label="Czas Treningu (mm:ss)"
                    Required="true"
                    RequiredError="Czas treningu jest wymagany"
                    Class="mb-4" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Anuluj</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(!success)">Dodaj</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance Dialog { get; set; } = default!;
    [Parameter]
    public Guid UserId { get; set; }
    private MudForm form = new();
    private bool success;
    private AddWorkoutDTO workout = new()
        {
            WorkoutName = string.Empty,
            WorkoutDate = DateTime.Now,
            WorkoutTime = TimeSpan.Zero,
            WorkoutQuality = 0
        };
    private string timeString = "00:00";

    private void OnTimeChangeAsync(string value)
    {
        timeString = value;
        if (TimeSpan.TryParse("00:" + value.PadLeft(5, '0'), out TimeSpan time))
        {
            workout.WorkoutTime = time;
        }
    }

    private async Task Submit()
    {
        await form.Validate();
        if (form.IsValid)
        {
            try
            {
                workout.UserId = UserId;
                await WorkoutService.CreteWorkoutAsync(workout);
                Snackbar.Add("Trening został dodany", Severity.Success);
                Dialog.Close(DialogResult.Ok(workout));
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Nie udało się dodać treningu: {ex.Message}", Severity.Error);
            }
        }
    }

    private void Cancel() => Dialog.Close();
}
